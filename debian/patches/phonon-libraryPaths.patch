Patch from upstream to make sure that phonon finds its backends
Index: b/phonon/factory.cpp
===================================================================
--- a/phonon/factory.cpp
+++ b/phonon/factory.cpp
@@ -79,6 +79,17 @@
 
 PHONON_GLOBAL_STATIC(Phonon::FactoryPrivate, globalFactory)
 
+static inline void ensureLibraryPathSet()
+{
+#ifdef PHONON_LIBRARY_PATH
+    static bool done = false;
+    if (!done) {
+        done = true;
+        QCoreApplication::addLibraryPath(QLatin1String(PHONON_LIBRARY_PATH));
+    }
+#endif // PHONON_LIBRARY_PATH
+}
+
 void Factory::setBackend(QObject *b)
 {
     Q_ASSERT(globalFactory->m_backendObject == 0);
@@ -102,6 +113,8 @@
         m_backendObject = f->createBackend();
     }
     if (!m_backendObject) {
+        ensureLibraryPathSet();
+
         // could not load a backend through the platform plugin. Falling back to the default
         // (finding the first loadable backend).
         const QLatin1String suffix("/phonon_backend/");
@@ -302,6 +315,7 @@
 #endif
     const QString suffix(QLatin1String("/phonon_platform/"));
     Q_ASSERT(QCoreApplication::instance());
+    ensureLibraryPathSet();
     foreach (QString libPath, QCoreApplication::libraryPaths()) {
         libPath += suffix;
         const QDir dir(libPath);
Index: b/phonon/CMakeLists.txt
===================================================================
--- a/phonon/CMakeLists.txt
+++ b/phonon/CMakeLists.txt
@@ -40,6 +40,7 @@
 endif (QT_QTDBUS_FOUND)
 
 
+add_definitions(-DPHONON_LIBRARY_PATH="${PLUGIN_INSTALL_DIR}/plugins")
 automoc4(phonon phonon_LIB_SRCS)
 add_library(phonon SHARED ${phonon_LIB_SRCS})
 if (QT_QTDBUS_FOUND)
Index: b/CMakeLists.txt
===================================================================
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,6 +1,9 @@
 project(Phonon)
 
-cmake_minimum_required(VERSION 2.4.5 FATAL_ERROR)
+cmake_minimum_required(VERSION 2.6.0 FATAL_ERROR)
+
+# CMP0002: we have multiple targets with the same name for the unit tests
+cmake_policy(SET CMP0002 OLD)
 
 # enable unit tests
 enable_testing()
@@ -20,16 +23,13 @@
 include (CheckCXXCompilerFlag)
 include (MacroEnsureVersion)
 
-if (CMAKE_MAJOR_VERSION GREATER 4)
-   # cmake 2.6.0 and automoc4 0.9.83 didn't add the necessary definitions for backends to moc calls
-   if (NOT AUTOMOC4_VERSION)
-      set(AUTOMOC4_VERSION "0.9.83")
-   endif (NOT AUTOMOC4_VERSION)
-   macro_ensure_version("0.9.84" "${AUTOMOC4_VERSION}" _automoc4_version_ok)
-   if (NOT _automoc4_version_ok)
-      message(FATAL_ERROR "Your version of automoc4 is too old. You have ${AUTOMOC4_VERSION}, you need at least 0.9.84")
-   endif (NOT _automoc4_version_ok)
-endif (CMAKE_MAJOR_VERSION GREATER 4)
+if (NOT AUTOMOC4_VERSION)
+   set(AUTOMOC4_VERSION "0.9.83")
+endif (NOT AUTOMOC4_VERSION)
+macro_ensure_version("0.9.86" "${AUTOMOC4_VERSION}" _automoc4_version_ok)
+if (NOT _automoc4_version_ok)
+   message(FATAL_ERROR "Your version of automoc4 is too old. You have ${AUTOMOC4_VERSION}, you need at least 0.9.86")
+endif (NOT _automoc4_version_ok)
 
 if (CMAKE_COMPILER_IS_GNUCXX)
    set (KDE4_ENABLE_EXCEPTIONS -fexceptions)
